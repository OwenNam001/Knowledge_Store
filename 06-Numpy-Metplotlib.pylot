import numpy as np
import matplotlib.pyplot as plt

1. DataFrame.plot()을 이용
기본적으로 dataFrame의 index가 x-axis가 된다.
info_df = pd.DataFrame (
                    {
                        "customer_id": [112, 403, 999, 543, 123],
                        "salary": [1000, 1200, 2000, 1500, 1700],
                        "name": ["John", "Kelly", "Sam", "April", "Bobbo"],
                        "email": ["jman@gmail", "kelly@aol.com", "sports@school.edu", "April@yahoo.com", "HeyImBobbo@msn.com"]
                    }
                )
info_df.set_index(["customer_id"], inplace=True)       <------ Optinal인데, 이것을 하면 "customer_id" 컬럼이 index가 된다.

1) line chart
info_df.plot(kind="line")                                # x, y를 주지 않으면 x는 인덱스, y는 numeric value만 담겨 있는 컬럼들이 그려진다. column datatype은 상관없다.
info_df.plot(kind="line", x="name")                      # x 만을 줄 수 있다. x는 index가 아닌 numeric, string 다 올 수 있다. y는 numeric 컬럼이 자동적으로 온다.
info_df.plot(kind="line", y="salary")                    # y 만을 줄 수 있다. y는 index가 아닌 numeric만 올 수 있다. x는 index가 자동적으로 온다.
info_df.plot(kind="line", x="name", y="salary")          # x, y를 줄 수 있다. x,y는 index가 아니고, x는 numeric, string다 올 수 있고, y는 numeric만 올 수 있다.

2) bar chart
info_df.plot(kind="bar")                                 # x, y를 주지 않으면 x는 인덱스, y는 numeric value만 담겨 있는 컬럼들이 그려진다. column datatype은 상관없다.
info_df.plot(kind="bar", x="name")                       # x 만을 줄 수 있다. x는 index가 아닌 numeric, string 다 올 수 있다. y는 numeric 컬럼이 자동적으로 온다.
info_df.plot(kind="bar", y="salary")                     # y 만을 줄 수 있다. y는 index가 아닌 numeric만 올 수 있다. x는 index가 자동적으로 온다.
info_df.plot(kind="bar", x="name", y="salary")           # x, y를 줄 수 있다. x,y는 index가 아니고, x는 numeric, string다 올 수 있고, y는 numeric만 올 수 있다.
plt.xticks(rotation="horizontal")                        # x-axis label을 horizontal로 회전하려면 pyplot을 이용해야 한다.

3) pie chart    << labels와 y를 줘야 한다. >>
info_df.plot(kind="pie")                                                                      # label, y를 주지 않으면 에러가 발생함
info_df.plot(kind="pie", labels=info_df['name'], autopct='%1.1f%%', startangle=0)             # label만을 주면 에러가 발생함
info_df.plot(kind="pie", y="salary", autopct='%1.1f%%', startangle=0)                         # y만을 줄 수 있다. y는 index가 아닌 numeric만 올 수 있다. label은 index가 자동적으로 온다.
info_df.plot(kind="pie", labels=info_df['name'], y="salary", autopct='%1.1f%%', startangle=0) # labels, y를 줄 수 있다. labels는 index 또는 numeric, string다 올 수 있고, y는 numeric만 올 수 있다.

4) scatter plot chart
info_df.reset_index().plot(kind='scatter')                                          # x, y를 주지 않으면 에러가 발생함
info_df.reset_index().plot(kind='scatter', x='customer_id', y='salary')             # x, y를 무조건 줘야 한다. x,y는 index를 포함해서 numeric, string 모두 올 수 있다.


<< Plot line chart >>
x_axis_data = np.arange(1,13,1)
points = [26.1, 25.3, 22.5, 20.6, 17.3, 14.5, 13.5, 15.8, 17.9, 19.2, 20.3, 24.7]
fahrenheit_point = [round(celcius * 9/5 + 32,1) for celcius in points]

plt.xlabel('X Axis Label')  # Replace 'X Axis Label' with your actual x-axis label
plt.ylabel('Temperature')
plt.title('Temperature Comparison')
plt.xlim(0, 10)
plt.ylim(-1, 1)
plt.grid()

plt.plot(x_axis_data, points, marker="o", color="red", linewidth=1) 
plt.plot(x_axis_data, fahrenheit_point)

# Draw a horizontal line with 0.25 transparency
plt.hlines(0, 0, 10, alpha=0.25)

# Multiple line을 그릴때는 handles를 이용한다.
sine_handle, = plt.plot(x_axis, sin, marker='o', color='blue', label="Sine")
cosine_handle, = plt.plot(x_axis, cos, marker='^', color='red', label="Cosine")
plt.legend(handles=[sine_handle, cosine_handle], loc="lower right")

plt.savefig("../Images/lineConfig.png")
plt.show()

<< Plot bar chart using DataFrame.plot() >>
study_count_df = pd.DataFrame(mouse_study_results_clean.groupby(["Drug Regimen"])[["Mouse ID", "Timepoint"]].size().reset_index(name="Number of rows"))
study_count_sorted_df = study_count_df.sort_values(["Number of rows"], ascending=False)
study_count_sorted_df.plot(kind="bar", x="Drug Regimen", y="Number of rows", figsize=(6,5), legend=False)

plt.title("Average Rain Per City")
plt.xlabel("Drug Regimen")
plt.ylabel("# of Observed Mouse Timepoints")

plt.show()
plt.tight_layout()

<< Plot bar chart using DataFrame.plot() >>
study_count_df = pd.DataFrame(mouse_study_results_clean.groupby(["Drug Regimen"])[["Mouse ID", "Timepoint"]].size().reset_index(name="Number of rows"))
study_count_sorted_df = study_count_df.sort_values(["Number of rows"], ascending=False)
study_count_sorted_df.plot(kind="bar", x="Drug Regimen", y="Number of rows", legend=False)

x_axis = np.arange(len(study_count_sorted_df["Drug Regimen"]))
y_axis = study_count_sorted_df["Number of rows"]

plt.figure(figsize=(8,5))
plt.bar(x_axis, y_axis, color="r" alpha=0.5, align="center")
tick_locations = [value for value in x_axis]
plt.xticks(tick_locations, study_count_sorted_df["Drug Regimen"], rotation="verticals")

plt.xlim(-0.9, len(x_axis)-0.1)
plt.ylim(0, max(y_axis)+10)

plt.xlabel("Drug Regimen")
plt.ylabel("# of Observed Mouse Timepoints")

plt.show()


<< Plot pie chart using pyplot >>
labels = ["Humans", "Smurfs", "Hobbits", "Ninjas"]
sizes = [220, 95, 80, 100]
colours = ["red", "orange", "lightcoral", "lightskyblue"]
explode = (0.1, 0, 0, 0)
plt.pie(sizes, explode=explode, labels=labels, colors=colours, autopct="%1.1f%%", shadow=True, startangle=140)
plt.axis("equal")
plt.show()


<< Scatter plot chart using pyplot >>
x_limit = 100
x_axis = np.arange(0, x_limit, 1)
data = [random.random() for value in x_axis]
plt.scatter(x_axis, data, marker="o", facecolors="red", edgecolors="black", s=x_axis, alpha=0.75)
plt.ylim(0, 1)
plt.xlim(0, x_limit)
plt.show()

