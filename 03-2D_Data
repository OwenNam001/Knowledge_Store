결론 : 
1. 2D이기 때문에 컬럼명과 location을 이용한 데이터 access가 가능해야 한다. multi-pair dictionary를 담은 List나 DataFrame을 이용한다.
2. Dictionary를 DataFrame으로 바꿀때는 List []에 일단 담아서 바꾼다. why? Dictionary는 자체적으로 row에 대한 location이 없기 때문이다. (03-1D_List_to_Others의 One Dictionary를..... 을 본다.)

<<-------------- multi-pair dictionary를 담은 List -------------->>
1) 01-Python-DataRead 의 "# 3" 을 본다.
2) 02-Python-Read-Howto-Use의 "<< 3. 1) 과 2)" 를 본다.

pto_hours_list = [
    {'employeeID': '79227', 'pto_hours_allowed': 160, 'pto_hours_taken': 56, 'sick_hours_allowed': 0, 'sick_hours_taken': 0},
    {'employeeID': '79189', 'pto_hours_allowed': 160, 'pto_hours_taken': 28, 'sick_hours_allowed': 40, 'sick_hours_taken': 8},
    {'employeeID': '79151', 'pto_hours_allowed': 120, 'pto_hours_taken': 100, 'sick_hours_allowed': 40, 'sick_hours_taken': 0}
]

pto_hours_list[0]['employeeID'] ===> 79227                   # location과 column명으로 데이터 access
pto_hours_list[2]['pto_hours_allowed'] ===> 120


<<-------------- DataFrame을 이용한다. -------------->>
1) 01-Python-DataRead 의 # 4를 본다.
2) 02-Python-Read-Howto-Use의 "# 리스트를 DataFrame으로 변환"를 본다.


