결론 : 
1. 2D이기 때문에 컬럼명과 location을 이용한 데이터 access가 가능해야 한다. multi-pair dictionary를 담은 List나 DataFrame을 이용한다.
2. Dictionary를 DataFrame으로 바꿀때는 List []에 일단 담아서 바꾼다. why? Dictionary는 자체적으로 row에 대한 location이 없기 때문이다. (03-1D_List_to_Others의 One Dictionary를..... 을 본다.)

<< 어떤 Data type인지, list인지 dataFrame인지 Series, dictionary 인지 등을 알 수 있다. >>
type(prices), type(prices_dict)

<< 그 안에 어떤 type의 데이터가 있는지 알 수 있다.  >>
for index, item in enumerate(tumor_vol_data):
    print(f"{index} {type(item)}")

<<-------------- multi-pair dictionary를 담은 List -------------->>
1) 01-Python-DataRead 의 "# 3" 을 본다.
2) 02-Python-Read-Howto-Use의 "<< 3. 1) 과 2)" 를 본다.

pto_hours_list = [
    {'employeeID': '79227', 'pto_hours_allowed': 160, 'pto_hours_taken': 56, 'sick_hours_allowed': 0, 'sick_hours_taken': 0},
    {'employeeID': '79189', 'pto_hours_allowed': 160, 'pto_hours_taken': 28, 'sick_hours_allowed': 40, 'sick_hours_taken': 8},
    {'employeeID': '79151', 'pto_hours_allowed': 120, 'pto_hours_taken': 100, 'sick_hours_allowed': 40, 'sick_hours_taken': 0}
]

pto_hours_list[0]['employeeID'] ===> 79227                   # location과 column명으로 데이터 access
pto_hours_list[2]['pto_hours_allowed'] ===> 120


<<-------------- DataFrame을 이용한다. -------------->>
1) 01-Python-DataRead 의 # 4를 본다.
2) 02-Python-Read-Howto-Use의 "# 리스트를 DataFrame으로 변환"를 본다.


<<-------------- DataFrame중 컬럼들을 여러 Aggregate function값으로 scalar 변수에 담고 결과들을 DataFrame으로 다시 변환  -------------->>
school_count = school_data["School ID"].count()
student_count = student_data["Student ID"].count()

# select count("student_name") from TAB where "maths_score" >= 50
passing_maths_count = school_data_complete[(school_data_complete["maths_score"] >= 50)]["student_name"].count()
passing_maths_percentage = passing_maths_count / float(student_count) * 100

area_summary = pd.DataFrame(    # scalar 변수들을 dictionary로 묶어서 다시 DataFrame을 만들때는 List에 담아서 바꾼다. Series를 DataFrame으로 만들때는 리스트를 쓰면 안된다.
                [{
                "Total number of unique schools": school_count,
                "Total Students": student_count,                
                "Total Passing Maths Count": passing_maths_count
                "% Passing Maths": passing_maths_percentage,
                "% Passing Reading": passing_reading_percentage                
                }]
                )


<<-------------- DataFrame중 컬럼들을 여러 Series로변환 Why? 계산을 가독성있게 편하게 할 수 있다. -------------->>
1. 반드시 키 컬럼을 지정한다.   Scalar 값처럼 List [] 를 쓰면 안된다.

data = {
    'Date': ['2013-10-16', '2013-10-17', '2013-10-18'],
    'Open': [19.10, 19.15, 19.75],
    'High': [20.02, 20.15, 20.31],
    'Low': [18.51, 19.13, 19.62],
    'Close': [19.26, 20.00, 20.20],
    'Adj Close': [10.277133, 10.671999, 10.778718],
    'Volume': [17412400, 1470400, 723500]
}
위와 같은 DataFrame이 있을때,

1) Key Column을 지정하지 않을 때
data_df = pd.DataFrame(data)
col= data_df["Close"]

"Close" 컬럼을 Series로 지정하면 default로 index가 생긴다.

0    19.26
1    20.00
2    20.20
print(col)

2) Key Column을 지정할때, 이 경우 Date 컬럼을 Key Column으로 지정함. default index는 생기지 않고, Date컬럼이 index로 생긴다.
   Key Column은 unique 할 필요는 없지만, 데이터가 unique하지 않으면 DataFrame.loc method는 error가 발생한다. iloc을 써야 한다.
data_df.set_index('Date', inplace=True)
col= data_df["Close"]

Date
2013-10-16    19.26
2013-10-17    20.00
2013-10-18    20.20

col['2013-10-16']     ====> 19.26       #키 값으로 data access가 가능하다. slicing도 가능하다.

3) 공통 Key Column을 지정하면서 여러 컬럼별 Series로 나눌때
school_type = df.set_index(["school_name", "loc_name"])["type"]
school_budget = df.set_index(["school_name", "loc_name"])["budget"]


<<-------------- 계산을 하면서 Series을 DataFrame으로 변환 -------------->>
school_data dataFrame에 "school_name", "budget", "size" 컬럼이 있고 새로운 compute 컬럼 "per_school_capita"을 계산하면서 "school_name"을 key컬럼으로 지정

< aggregate function이 없을때, 데이터 레벨의 변화가 없을때, 새로운 compute column명을 "per_school_capita" 로 준다.  >
1) DataFrame에서 set_index 컬럼을 지정하면서 각각의 Series로 만들어 Series끼리 계산하면 자동적으로 key값 matching해서 계산한다.
per_school_budget = school_data.set_index(["school_name"])["budget"]
per_school_counts = school_data.set_index(["school_name"])["size"]
per_school_capita = per_school_budget / per_school_counts

2) Dictionary 이용하는 방법. Scalar 값처럼 List [] 를 쓰면 안된다.   
per_school_capita = pd.DataFrame(
                                {
                                "school_name": school_data["school_name"],    
                                "per_school_capita": school_data["budget"]/school_data["size"]
                                }
                                )
per_school_capita.set_index(["school_name"])

< aggregate function이 있을때, 데이터 레벨의 변화가 있을때, 새로운 compute column명을 "passing_maths_counts" 로 준다. >
< reset_index를 안하면 groupby 컬럼이 index가 되는 series가 만들어지고, reset_index를 하면 index 컬럼이 새로 만들어지면서 dataFrame이 만들어진다.>
school_passing_maths = school_data_complete[school_data_complete["maths_score"] >= 50][["school_name","student_name"]]
per_school_passing_maths = school_passing_maths.groupby("school_name")["student_name"].count().reset_index(name="passing_maths_counts")

# select "Mouse ID","Timepoint", count(*) as Count from TAB group by "Mouse ID","Timepoint" having count(*) > 1
grouped = mouse_study_results.groupby(["Mouse ID","Timepoint"]).size()
grouped[grouped > 1].reset_index(name="Count")
grouped[grouped > 1].reset_index()["Mouse ID"].unique()       # unique한 "Mouse ID"만 list up하기

<<-------------- 계산이 끝난 여러 Series들을 DataFrame으로변환 -------------->>
base, base_norm ===> Pandas Series

1. pandas conat 이용
base_df = pd.concat([base, base_norm], axis=1)
base_df.columns = ['close', 'normalised']                                            # 컬럼 rename 방법1
base_ren_df = base_df.rename(columns={"Date of publication":"Publication Year"} )    # 컬럼 rename 방법2

2. Series가 동일한 Key값을 가질때 List를 이용. Scalar 값처럼 List [] 를 쓰면 안된다.
data = {
        "Date of publication" : base,
        "Publication Year"    : base_norm
}

base_df = pd.DataFrame(data),  base_df에 key 컬럼은 자동적으로 담긴다.
