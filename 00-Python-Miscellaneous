<<print방식 2가지>>
1. Convert the integer years into a string and prints
print("He has been coding for " + str(years) + " years")

2. An f-string accepts all data types without conversion
print(f"Expert status: {expert_status}")


<< Data input convert >>

trueOrFalse = bool(input("Is the input truthy? "))
print("The input was converted to " + str(trueOrFalse))

# Take input of you and your neighbour

your_name = input("Enter your first name: ")
neighbor_name = input("Enter your neighbor's first name: ")

your_month = input("Enter your how many months you have been coding: ")
neighbor_month = input("Enter your how many months neighbor has been coding: ")

# input regarded as string and need to convert to calculate
total_months = float(your_month) + int(neighbor_month)

print(f"Your name is {your_name} and neighbor's name is {neighbor_name}")
print(f"Together we have been coding for {total_months} months!" )



<< Conditional >>
x = 1
y = 10

# Checks if one value is equal to another
if x == 1:
    print("x is equal to 1")

# Checks if one value is NOT equal to another
if y != 1:
    print("y is not equal to 1")

# Checks if one value is less than another
if x < y:
    print("x is less than y")

# Checks if one value is greater than another
if y > x:
    print("y is greater than x")

# Checks if a value is greater than or equal to another
if x >= 1:
    print("x is greater than or equal to 1")

# Checks for two conditions to be met using "and"
if x == 1 and y == 10:
    print("Both values returned true")

# Checks if either of two conditions is met
if x < 45 or y < 5:
    print("One or more of the statements were true")

# Nested if statements
if x < 10:
    if y < 5:
        print("x is less than 10 and y is less than 5")
    elif y == 5:
        print("x is less than 10 and y is equal to 5")
    else:
        print("x is less than 10 and y is greater than 5")


<< List와 if >>
name = "Dan"

group_one = ["Greg", "Tany", "Susan"]
group_two = ["Gerald", "Paul", "Ryder"]
group_three = ["Carla", "Dan", "Jefferson"]

if name in group_one:
    print(f"{name} is in the group one")
elif name in group_two:
    print(f"{name} is in the group two")
elif name in group_three:
    print(f"{name} is in the group three")

<< List Manipulation ==> Array >>

remove : delete value
pop : delete location

# 하나의 단어를 글자 하나씩 나누어 List에 담는 방법 1
fish = "halibut"
letters = []
for character in fish:
    letters.append(character.upper())
print(letters)

# 하나의 단어를 글자 하나씩 나누어 List에 담는 방법 2
letters = [f"This is {character.upper()}" for character in fish]
print(letters)

# Create a variable and set it as an List
myList = ["Kirra", 25, "Ahmed", 80]
print(myList)

# Adds an element onto the end of a List
myList.append("Matt")
print(myList)

# Returns the index of the first object with a matching value
print(myList.index("Matt"))

# Changes a specified element within an List at the given index
myList[3] = 85
print(myList)

# Returns the length of the List
print(len(myList))

# Removes a specified object from an List
myList.remove("Matt")
print(myList)

# Removes the object at the index specified 2 times
myList.pop(0)
myList.pop(0)
print(myList)

# tuple is read-only not able to change
# Creates a tuple, a sequence of immutable Python objects that cannot be changed
myTuple = ('Python', 100, 'VBA', False)
print(myTuple)


<< Loops >>
# Loop through a range of numbers (0 through 4)
for x in range(5):
    print(x)

print("-----------------------------------------")

# Loop through a range of numbers (2 through 6 - yes 6! Up to, but not including, 7)
for x in range(2, 7):
    print(x)

print("----------------------------------------")

# Iterate through letters in a string
word = "Peace"
for letter in word:
    print(letter)

print("----------------------------------------")

# Iterate through a list
zoo = ["cow", "dog", "bee", "zebra"]
for animal in zoo:
    print(animal)

print("----------------------------------------")

# Loop while a condition is being met
run = "y"

while run == "y":
    print("Hi!")
    run = input("To run again. Enter 'y': ")


continue_chain = 'y'
start = 0  # Initialize starting point for the chain

while continue_chain == 'y':
    # Ask the user for the number range
    num = int(input("How many numbers? "))

    # Print the number chain starting from the end of the previous chain
    for i in range(start, int(num) +  start):
        print(i)        

    start = start +  int(num)   

    # Ask the user if they want to continue
    continue_chain = input("Would you like to continue? (y/n): ")


<< List와 for loop, index등의 관계 >>
# The list of lollies to print to the screen
lolly_list = [
    "Fantales", 
    "Snakes Alive", 
    "Minties", 
    "Liquorice Allsorts", 
    "Strawberries & Cream", 
    "Life Savers", 
    "Banana Lollies", 
    "Fruit Pastilles", 
    "Sherbies"
]

for i in range(len(lolly_list)):
    print("[" + str(i) + "] " + lolly_list[i])

allowance = 5
lolly_cart = []

for x in range(allowance):
    numberOfCandy = int(input("Type the number of candy you want to add "))
    lolly_cart.append(lolly_list[numberOfCandy])    

for chosen_lolly in lolly_cart:
    print(f"{chosen_lolly}")


<<List와 while for, index >>

# Pie List
pie_list = ["Aussie Beef", "Steak and Kidney", "Chicken", "Shepherd's", "Spinach and Feta", 
            "Curry", "Lamb and Rosemary", "Steak and Mushroom", "Apple", "Lemon Meringue"]


print("Welcome to the House of Pies! Here are our pies: ")

continue_shopping = "y"

shopping_list = [0]*len(pie_list)  # set 0 with the number of pie_list

while continue_shopping == "y":
    print("-"*50)
    for i in range(len(pie_list)):

        if i == 0:
            print(f"({i+1}) {pie_list[i]}", end="")
        else:
            print(f", ({i+1}) {pie_list[i]}", end="")

    print(" ")
    selectNumber = int(input("enter the number for the pie you would like to order: "))
    print(" ")
    print(f"Great! We'll have that {pie_list[selectNumber-1]} right out for you")

    #shopping_list를 pie_list와 동일한 index번호로 초기화하여 데이터를 저장하면 출력시 if문이 필요없다.
    #Left join 하는 방법
    shopping_list[selectNumber-1] = shopping_list[selectNumber-1] + 1

    print(" ")
    continue_shopping = input("Do you want to continue shopping? (y)/(n): ")

print("")
print("You purchased:")
for i in range(len(pie_list)):
    print(f"{shopping_list[i]} {pie_list[i]}")


<< File read >>
<< 방법 1 text file >>
# Store the file path associated with the file (note the backslash may be OS specific)
file = '../Resources/input.txt'  # Assign the file

# Open the file in "read" mode ('r') and store the contents in the variable "text"
with open(file, 'r') as text:

    # This stores a reference to a file stream file information
    #print(text)

    # Store all of the text inside a variable called "lines"
    lines = text.read()

    # Print the contents of the text file
    print(lines)


<< 방법 2 csv file >>
# This will allow us to create file paths across operating systems
import os

# Module for reading CSV files
import csv

csvpath = os.path.join('..', 'Resources', 'contacts.csv')
with open(csvpath, encoding='UTF-8') as csvfile:

    # CSV reader specifies delimiter and variable that holds contents
    csvreader = csv.reader(csvfile, delimiter=',')

    print(csvreader)

    # Read the header row first (skip this step if there is no header)
    csv_header = next(csvreader)  # skip first row, skip header
    print(f"CSV Header: {csv_header}")

    # Read each row of data after the header
    for current_row in csvreader:
        print(current_row)


<< randokm, string module >>
# Import the random and string Module
import random
import string

# Use the string module's custom method: ".ascii_letters"
print(string.ascii_letters)

# Use the random module's custom method randint
for x in range(10):
    print(random.randint(1, 10))

# Generate a random integer between 1 and 10
random.randint(1, 10) : 

string module provides a collection of string constants
- string.ascii_letters: A concatenation of string.ascii_lowercase and string.ascii_uppercase (i.e., all ASCII letters).
- string.ascii_lowercase: The lowercase letters 'abcdefghijklmnopqrstuvwxyz'.
- string.ascii_uppercase: The uppercase letters 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
- string.digits: The string '0123456789'.
- string.hexdigits: The string '0123456789abcdefABCDEF'.
- string.octdigits: The string '01234567'
- string.punctuation: String of ASCII characters which are considered punctuation characters.
- string.whitespace: A string containing all ASCII characters that are considered whitespace.



<< File write, List Write, Excel data read and Write >>
<< 원본 excel을 읽어서 새로운 데이터 set을 만들어서 새로운 파일을 생성 >>

# Dependencies
import os
import csv

work_csv = os.path.join("..", "Resources", "Absenteeism_at_work.csv")

# Lists to store data
reason_for_absence = []
distance_from_work = []
service_time = []
age = []
hit_target = []
absenteeism_time_in_hours = []
percentage_of_day_missed  = []

# with open(work_csv, encoding='utf-8') as csvfile:
with open(work_csv) as csvfile:

    csvreader = csv.reader(csvfile, delimiter=",")
    for row in csvreader:
        # Add reason for absence
        reason_for_absence.append(row[1])

        # Add distance from work
        distance_from_work.append(row[6])

        # Add service time
        service_time.append(row[7])

        # Add age
        age.append(row[8])

        # Determine percentage of day missed, given an eight hour work day
        percent = round(int(float(row[20])) / 8 * 100, 2)
        percentage_of_day_missed.append(str(percent) + "%")

        # Add absenteeism time in hours
        absenteeism_time_in_hours.append(row[20])


# Zip lists together join해서 한 테이블로 생성
cleaned_csv = list(zip(reason_for_absence, distance_from_work, service_time, age, percentage_of_day_missed, absenteeism_time_in_hours))

# Set variable for output file
output_file = os.path.join("absenteeism_final.csv")

#  Open the output file
with open(output_file, "w", newline='') as datafile:
    writer = csv.writer(datafile)

    # Write the header row
    writer.writerow(["Reason for Absence", "Distance from Work", "Service Time", "Age", "Percentage of Day Missed", "Absenteeism Time in Hours"])

    # Write in zipped rows
    writer.writerows(cleaned_csv)



< 세개의 list를 하나의 tuples로 merge함 >
import csv
import os

# Three Lists
indexes = [1, 2, 3, 4]
employees = ["Michael", "Dwight", "Meredith", "Kelly"]
department = ["Boss", "Sales", "Sales", "HR"]

# Zip all three lists together into tuples
roster = list(zip(indexes, employees, department))

# Print the contents of each row
for employee in roster:
    print(employee)


< Function, Lists >
# The prime use case for functions is in being able to run the same code for different values
list_one = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
list_two = [11, 12, 13, 14, 15]

def list_information(simple_list):
    print(f"The values within the list are...")
    for value in simple_list:
        print(value)
    print("The length of this list is... " + str(len(simple_list)))

list_information(list_one)
list_information(list_two)

# function에서 list를 인자로 받는 방법
def average(numbers):
    total_sum = sum(numbers)
    count = len(numbers)
    average = total_sum / count
    return average

print(average([1, 5, 9]))
print(average(range(11)))

numbers = [1,5,9]
print(average(numbers))


# Basic Definition return
def square(number):
    return number * number

squared = square(2)
print(squared)

# Simple Function with no parameters
def show():
    print(f"Hi!")

show()


# Simple function with one parameter
def show(message):
    print(message)

show("Hello, World!")


