
# Dependencies
import json
import requests
from config import api_key
from pprint import pprint


# Load JSON
filepath = Path("../Resources/video_api_response.json")
with open(filepath) as jsonfile:
    video_json = json.load(jsonfile)

이렇게 Jason file을 읽어오면 video_json 는 Dictionary로 생긴다.

# Specify the URL
url = "https://static.bc-edx.com/data/dla-1-2/m6/lessons/2/request_review.json"
response = requests.get(url)
response.status_code
response_json = response.json()
pprint(f"The first response is {response_json[0]}")    # pprint는 print보다 좀더 readability가 좋게 출력된다.

<< query_url을 만들고 call >>
url = "http://api.openweathermap.org/data/2.5/weather?"
city = "London"
query_url = url + "appid=" + api_key + "&q=" + city

weather_response = requests.get(query_url)
weather_json = weather_response.json()

# Get the temperature from the response
pprint(f"The weather API responded with: {weather_json}")



# use list of units
units = ["metric", "imperial"]
# set up list to hold two different temperatures
temperature = []

# loop를 돌면서 건건이 json file의 데이터를 dataFrame으로 만드는 과정
# loop through the list of units and append them to temperatures list
for i, city in enumerate(cities):

    # Group cities in sets of 50 for logging purposes
    if (i % 50 == 0 and i >= 50):
        set_count += 1
        record_count = 0

    # Create endpoint URL with each city
    city_url = url + "appid=" + weather_api_key + "&units=" + units + "&q=" + city  

    # Log the url, record, and set numbers
    print("Processing Record %s of Set %s | %s" % (record_count, set_count, city))

    # Add 1 to the record count
    record_count += 1

    # Run an API request for each of the cities
    try:
        # Parse the JSON and retrieve data
        city_weather = requests.get(city_url).json()
        
        # Parse out latitude, longitude, max temp, humidity, cloudiness, wind speed, country, and date
        city_lat = city_weather['coord']['lat']
        city_lng = city_weather['coord']['lon']
        city_max_temp = city_weather['main']['temp_max']
        city_humidity = city_weather['main']['humidity']
        city_clouds = city_weather['clouds']['all']
        city_wind = city_weather['wind']['speed']
        city_country = city_weather['sys']['country']
        city_date = city_weather['dt']

        # Append the City information into city_data list
        city_data.append({"City": city, 
                          "Lat": city_lat, 
                          "Lng": city_lng, 
                          "Max Temp": city_max_temp,
                          "Humidity": city_humidity,
                          "Cloudiness": city_clouds,
                          "Wind Speed": city_wind,
                          "Country": city_country,
                          "Date": city_date})

    # If an error is experienced, skip the city
    except:
        print("City not found. Skipping...")
        pass

# Report temperatures by accessing each element in the list
print(f"The temperature in Bujumbura is {temperature[0]} C. or {temperature[1]} F.")

url = "http://api.worldbank.org/v2/"

lending_response = requests.get(f"{url}lendingTypes?format=json").json()
lending_types = [lending_type["id"] for lending_type in lending_response[1]]

country_count_by_type = {}
for lending_type in lending_types:
    query = f"{url}countries?lendingType={lending_type}&format=json"
    response = requests.get(query).json()
    country_count_by_type[lending_type] = response[0]["total"]


<< Exception Handling >>
try:
    print(students["Mary"])
except (KeyError, IndexError):                     # multiple error를 잡을 수 있다.
    print("Oops, that key doesn'y exist")


try:
    print(students["Mary"])
except Exception as e:                             # 모든 에러에서 다 쓰일 수 있다.
    print("Oops, that key doesn'y exist")

try:
    print(students["Mary"])
except KeyError:
    print("Oops, that key doesn'y exist")

try:
    print("Infinity looks like + " + str(10 / 0) + ".")
except ZeroDivisionError:
    print("Oops divider is 0")

try:
    print("I think her name was + " + name + "?")
except NameError:
    print("Name Error")

try:
    print("Your name is a nonsense number. Look: " + int("Gabriel"))
except ValueError:
    print("Drat. 'Gabriel' isn't a number?")
